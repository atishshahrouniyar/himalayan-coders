# Generated by Django 5.2.5 on 2025-08-23 18:04

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProfessorProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('title', models.CharField(max_length=200)),
                ('department', models.CharField(max_length=200)),
                ('institution', models.CharField(max_length=200)),
                ('researchAreas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('researchDescription', models.TextField(blank=True, null=True)),
                ('methods', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('publications', models.JSONField(default=list)),
                ('labWebsite', models.URLField(blank=True, null=True)),
                ('googleScholarUrl', models.URLField(blank=True, null=True)),
                ('orcidUrl', models.URLField(blank=True, null=True)),
                ('acceptingStudents', models.BooleanField(default=True)),
                ('preferredDegreeLevels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
                ('prerequisites', models.TextField(blank=True, null=True)),
                ('contactPreferences', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
                ('profileCompleteness', models.IntegerField(default=0)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'professor_profiles',
            },
        ),
        migrations.CreateModel(
            name='ResearchProject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('summary', models.TextField()),
                ('description', models.TextField()),
                ('researchAreas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('techniques', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('datasets', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('tools', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('desiredSkills', models.JSONField(default=list)),
                ('hoursPerWeek', models.IntegerField()),
                ('startWindow', models.CharField(max_length=100)),
                ('endWindow', models.CharField(blank=True, max_length=100, null=True)),
                ('compensation', models.CharField(choices=[('Stipend', 'Stipend'), ('Credit', 'Credit'), ('Volunteer', 'Volunteer')], max_length=20)),
                ('location', models.CharField(choices=[('On-site', 'On-site'), ('Remote', 'Remote'), ('Hybrid', 'Hybrid')], max_length=10)),
                ('isActive', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='api.professorprofile')),
            ],
            options={
                'db_table': 'research_projects',
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('firstName', models.CharField(max_length=100)),
                ('lastName', models.CharField(max_length=100)),
                ('preferredName', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('university', models.CharField(max_length=200)),
                ('department', models.CharField(max_length=200)),
                ('degreeLevel', models.CharField(choices=[('BS', 'Bachelor of Science'), ('MS', 'Master of Science'), ('PhD', 'Doctor of Philosophy'), ('Other', 'Other')], max_length=10)),
                ('year', models.IntegerField()),
                ('semester', models.IntegerField()),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('graduationTarget', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('remotePreference', models.CharField(blank=True, choices=[('On-site', 'On-site'), ('Remote', 'Remote'), ('Hybrid', 'Hybrid')], max_length=10, null=True)),
                ('workAuthorization', models.CharField(blank=True, max_length=200, null=True)),
                ('timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('primaryInterests', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('methods', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('interestStatement', models.TextField(blank=True, null=True)),
                ('programmingSkills', models.JSONField(default=list)),
                ('labSkills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('statisticalSkills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('publications', models.JSONField(default=list)),
                ('projects', models.JSONField(default=list)),
                ('workHistory', models.JSONField(default=list)),
                ('coursework', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), default=list, size=None)),
                ('hoursPerWeek', models.IntegerField()),
                ('startDate', models.DateField(blank=True, null=True)),
                ('duration', models.CharField(blank=True, max_length=20, null=True)),
                ('compensation', models.CharField(blank=True, max_length=20, null=True)),
                ('creditSeeking', models.BooleanField(default=False)),
                ('cvUrl', models.URLField(blank=True, null=True)),
                ('portfolioUrl', models.URLField(blank=True, null=True)),
                ('googleScholarUrl', models.URLField(blank=True, null=True)),
                ('orcidUrl', models.URLField(blank=True, null=True)),
                ('githubUrl', models.URLField(blank=True, null=True)),
                ('linkedinUrl', models.URLField(blank=True, null=True)),
                ('profileVisibility', models.CharField(choices=[('public', 'Public'), ('invite-only', 'Invite Only'), ('private', 'Private')], default='public', max_length=20)),
                ('profileCompleteness', models.IntegerField(default=0)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_profiles',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('matchType', models.CharField(choices=[('professor', 'Professor'), ('project', 'Project')], max_length=20)),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('highlights', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), default=list, size=None)),
                ('studentInterests', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('professorInterests', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('skillFit', models.JSONField(default=list)),
                ('availabilityFit', models.BooleanField(default=False)),
                ('levelFit', models.BooleanField(default=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('professor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='api.professorprofile')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='api.researchproject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='api.studentprofile')),
            ],
            options={
                'db_table': 'matches',
            },
        ),
    ]
